import { NextRequest, NextResponse } from "next/server";

export async function POST(req: NextRequest) {
  const { prompt, agent, useRailway = false } = await req.json();
  if (!prompt || !agent) {
    return NextResponse.json({ error: "Prompt and agent are required" }, { status: 400 });
  }
  
  try {
    // Check if we should use Railway Gemma 2B endpoint
    if (useRailway && process.env.RAILWAY_GEMMA_URL) {
      console.log('Using Railway Gemma 2B endpoint');
      
      const railwayRes = await fetch(`${process.env.RAILWAY_GEMMA_URL}/generate`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          prompt: prompt,
          max_length: 512,
          temperature: 0.7,
          top_p: 0.9,
          do_sample: true
        }),
      });
      
      if (!railwayRes.ok) {
        throw new Error(`Railway API error: ${railwayRes.status}`);
      }
      
      const railwayData = await railwayRes.json();
      return NextResponse.json({ 
        output: railwayData.generated_text || `Generated by Railway Gemma 2B: ${prompt}`,
        model: "railway-gemma-2b",
        processing_time: railwayData.processing_time
      });
    }
    
    // Fallback to OpenRouter
    console.log('Using OpenRouter endpoint');
    const host = req.headers.get('host') || 'localhost:3000';
    const protocol = process.env.NODE_ENV === 'production' ? 'https' : 'http';
    
    const openRouterRes = await fetch(`${protocol}://${host}/api/openrouter`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ 
        agentType: agent, 
        message: prompt 
      }),
    });
    
    if (!openRouterRes.ok) {
      throw new Error(`OpenRouter API error: ${openRouterRes.status}`);
    }
    
    const data = await openRouterRes.json();
    return NextResponse.json({ 
      output: data.response || `Generated by ${agent}: ${prompt}`,
      model: "openrouter"
    });
  } catch (error) {
    console.error('MBOS API error:', error);
    return NextResponse.json({ 
      error: "Failed to generate response",
      output: `Error: ${error instanceof Error ? error.message : 'Unknown error'}`
    }, { status: 500 });
  }
}